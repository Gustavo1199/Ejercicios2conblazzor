@page "/Ejercicio3"


<!--Este es el programa numero 3 para consultar las cedula-->
<div class="card card-columns">
    <div class="card-header">Consultar si la cedula es valida </div>
    <div class="card-body">
        <div class="input-group mb-3">
            <span class="input-group-text" id="basic-addon1"></span>
            <input type="text" @bind-value="@cedula" class="form-control" placeholder="Digita la cedula" aria-label="Username" aria-describedby="basic-addon1">
        </div>
        <label>
            <button type="button" @onclick="ValidaCedula" class="btn btn-primary">Validar</button>
        </label>

        <label>
            <button type="button" @onclick="Limpiar" class="btn btn-danger">Limpiar</button>
        </label>
    </div>
    <div class="card-footer">    
            @{
                if (validacion == true)
                {
                   <html> 
                        <div class="p-3 mb-2 bg-success text-white">La cedula esta correcta </div> 
                   </html>
                }
                else
                {
                    @errores
                }
            }
    </div>
</div>






@code {

    //Declaracion de la Varibles
    string cedula = "";
    string errores = "";
    bool validacion = false;

    //* Método o función para validar una cédula dominicana*
    public void ValidaCedula()
    {
        //Declaración de variables a nivel de método o función.

        int verificador = 0;
        int digito = 0;
        int digitoVerificador = 0;
        int digitoImpar = 0;
        int sumaPar = 0;
        int sumaImpar = 0;
        int longitud = Convert.ToInt32(cedula.Length);
        /* Control de errores en el código */
        try
        {
            //verificamos que la longitud del parametro sea igual a 11
            if (longitud == 11)
            {
                digitoVerificador = Convert.ToInt32(cedula.Substring(10, 1));
                //recorremos en un ciclo for cada dígito de la cédula
                for (int i = 9; i >= 0; i--)
                {
                    //si el digito no es par multiplicamos por 2
                    digito = Convert.ToInt32(cedula.Substring(i, 1));
                    if ((i % 2) != 0)
                    {
                        digitoImpar = digito * 2;
                        //si el digito obtenido es mayor a 10, restamos 9
                        if (digitoImpar >= 10)
                        {
                            digitoImpar = digitoImpar - 9;
                        }
                        sumaImpar = sumaImpar + digitoImpar;
                    }
                    /*En los demás casos sumamos el dígito y lo aculamos 
                     en la variable */
                    else
                    {
                        sumaPar = sumaPar + digito;
                    }
                }
                /*Obtenemos el verificador restandole a 10 el modulo 10 
                de la suma total de los dígitos*/
                verificador = 10 - ((sumaPar + sumaImpar) % 10);
                /*si el verificador es igual a 10 y el dígito verificador
                  es igual a cero o el verificador y el dígito verificador 
                  son iguales retorna verdadero*/
                if (((verificador == 10) && (digitoVerificador == 0))
                     || (verificador == digitoVerificador))
                {
                    validacion = true;
                }
                else
                {
                    errores = "Cedula Invalida!...";
                }
            }
            else
            {
                errores = "La cedula debe contener once(11) digitos";
            }
        }
        catch
        {
            errores += "No se pudo validar la cédula";
        }
    }

    //Este metodo es para limpiar los campos 
    public void Limpiar()
    {
        cedula = "";
        errores = "";
        validacion = false;


    }





    }











